if empty(glob(stdpath('data') . '/site/autoload/plug.vim'))
  silent execute '!curl -fLo ' . expand(stdpath('data') . '/site/autoload/plug.vim') . ' --create-dirs ' .
    \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(expand(stdpath('data') . '/plugged'))
  Plug 'dracula/vim', { 'as': 'dracula' }
  Plug 'itchyny/lightline.vim'

  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-dispatch'

  Plug 'airblade/vim-rooter'
  Plug 'airblade/vim-gitgutter'
  Plug 'rhysd/git-messenger.vim'
  Plug 'jiangmiao/auto-pairs'
  
  " Follow symlinks
  Plug 'moll/vim-bbye'
  Plug 'aymericbeaumet/vim-symlink'

  Plug 'vim-scripts/ReplaceWithRegister'
  Plug 'kana/vim-textobj-user'
  Plug 'kana/vim-textobj-function'

  Plug 'ludovicchabant/vim-gutentags'

  Plug 'honza/vim-snippets'
  Plug 'SirVer/ultisnips'
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'Shougo/deoplete-lsp'
  Plug 'neovim/nvim-lsp'
call plug#end()

set smartindent
set expandtab
set relativenumber
set splitbelow
set splitright
set termguicolors
set nomodeline
set autowriteall
set nobackup
set nowritebackup
set noswapfile
set linebreak
set smartcase
set undofile

set textwidth=119
set mouse=a
set tabstop=4
set shiftwidth=4
set completeopt=menuone,longest,preview
set clipboard=unnamed
set wildmode=longest:full,full

" Look for tags file in current buffer dir, then in the current dir, then use stdlibs
" Generated by using the following:
" $ ctags -R -f ~/.local/share/nvim/include/systags /usr/include /usr/local/include
set tags=./tags,tags,~/.local/share/nvim/include/systags

augroup dracula_customization
  autocmd!
  autocmd ColorScheme dracula highlight SpellBad gui=undercurl
  autocmd ColorScheme dracula highlight Search guibg=NONE guifg=Yellow gui=underline term=underline cterm=underline
augroup END

augroup nvim_settings
  autocmd!
  autocmd TermOpen,BufEnter term://* startinsert!
  autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank()
augroup END

augroup c_syntax
  autocmd!
  autocmd Syntax c syntax keyword cType 
        \ u8 u16 u32 u64 s8 s16 s32 s64
        \ __u8 __u16 __u32 __u64 __s8 __s16 __s32 __s64
  autocmd Syntax c syntax keyword cStatement fallthrough
  autocmd Syntax c syntax keyword cOperator likely unlikely
  autocmd Syntax c highlight default link LinuxError ErrorMsg
  autocmd Syntax c syntax match LinuxError /\s\+$/ " trailing whitespace
  autocmd Syntax c syntax match LinuxError / \+ze\t/ " spaces before tab
  autocmd Syntax c syntax match LinuxError /\%>80v[^()\{\}\[\]<>]+/ " virtual column 81 and more 
augroup END

augroup file_history
  autocmd!
  " Return to last edit position when opening files (You want this!)
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
augroup END

augroup filetype_settings
  autocmd!
  autocmd FileType vim setlocal tabstop=2 shiftwidth=2
  autocmd FileType json syntax match Comment +\/\/.\+$+
  autocmd FileType json setlocal commentstring=//\ %s
  autocmd FileType xml setlocal foldmethod=indent foldlevelstart=999 foldminlines=0
  autocmd FileType markdown setlocal textwidth=79 tabstop=2 shiftwidth=2
  autocmd FileType zsh setlocal foldmethod=marker tabstop=4 shiftwidth=4

  autocmd BufEnter *.jsh setlocal filetype=java
  autocmd FileType java,groovy setlocal tabstop=4 shiftwidth=4 expandtab colorcolumn=120

  autocmd FileType c 
        \ setlocal tabstop=4 shiftwidth=4
        \ formatprg=clang-format\ -style=file\ --fallback-style=Microsoft
        \ textwidth=80
        \ cindent cinoptions=:0,l1,t0,g0,(0

augroup END

let mapleader = ','

try
  let g:dracula_inverse = 0
  colorscheme dracula
catch
  colorscheme default
endtry

let g:netrw_dirhistmax = 0
let g:netrw_banner = 0
let g:netrw_winsize = 25
let g:netrw_liststyle = 3

" Disable python2, ruby, and node providers
let g:loaded_python_provider = 0
let g:loaded_ruby_provider = 0
let g:loaded_perl_provider = 0
let g:loaded_node_provider = 0

let g:lightline = {
      \ 'colorscheme': 'dracula',
      \ }

let g:deoplete#enable_at_startup = 1

let g:gitgutter_map_keys = 0

nnoremap ]h :GitGutterNextHunk<cr>
nnoremap [h :GitGutterPrevHunk<cr>

nmap <leader>hs <Plug>(GitGutterStageHunk)
nmap <leader>hu <Plug>(GitGutterUndoHunk)
nmap <leader>hp <Plug>(GitGutterPreviewHunk)

omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

nnoremap <leader>gs :G status -s<cr>
nnoremap <leader>gl :G log --oneline<cr>
nnoremap <leader>gb :!git branch -a<cr>
nnoremap <leader>gd :G diff<cr>

" Yank from current position till eol, similar to C and D
nnoremap Y y$

command! -nargs=0 SyncSyntax :syntax sync fromstart

lua << EOF
  local nvim_lsp = require'nvim_lsp'
  nvim_lsp.rls.setup{}
  nvim_lsp.vimls.setup{}
  nvim_lsp.clangd.setup {
    cmd = {"/usr/bin/clangd", "--background-index"}
  }

  -- Until they release the `vim.lsp.util.formatexpr()`
  -- https://github.com/neovim/neovim/issues/12528
  -- https://github.com/neovim/neovim/pull/12547
  -- for use with `formatexpr` if called without parms
  -- @param start_line 1-indexed line
  -- @param end_line 1-indexed line
  -- @param timeout_ms optional
  function formatexpr(start_line, end_line, timeout_ms)
    if not start_line or not end_line then
      if vim.fn.mode() == 'i' or vim.fn.mode() == 'R' then
        -- `formatexpr` is also called when exceding
        -- `textwidth` in insert mode
        -- fall back to internal formatting
        return 1
      end
      start_line = vim.v.lnum
      end_line = start_line + vim.v.count - 1
    end
    if start_line > 0 and end_line > 0 then
      local params = {
        textDocument = { uri = vim.uri_from_bufnr(0) };
        range = {
          start = { line = start_line - 1; character = 0; };
          ["end"] = { line = end_line - 1; character = 0; };
        };
      };
      local result = vim.lsp.buf_request_sync(0, "textDocument/rangeFormatting", params, timeout_ms)
      if result then
        result = result[1].result
        vim.lsp.util.apply_text_edits(result)
      end
    end
   -- do not run builtin formatter.
    return 0
  end
EOF

nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> <F6>  <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>

autocmd Filetype vim,rust,c setlocal omnifunc=v:lua.vim.lsp.omnifunc
autocmd Filetype vim,rust,c setlocal formatexpr=v:lua.formatexpr()

" use tab for easy completion navigation
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" enter to select completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
