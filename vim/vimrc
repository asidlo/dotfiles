"==============================================================================
" Author:   Andrew Sidlo
" Updated:  April 14, 2019
"==============================================================================
" Section: Plugin Manager {{{
"==============================================================================
" Automatically download the plug.vim plugin manager vimscript
" Run :PlugInstall to install all plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'nanotech/jellybeans.vim'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'godlygeek/tabular'
Plug 'itchyny/lightline.vim'
Plug 'plasticboy/vim-markdown'
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
Plug 'airblade/vim-rooter'
Plug 'ryanoasis/vim-devicons'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'

" Automatically clear search highlights after you move your cursor.
Plug 'haya14busa/is.vim'

" Handle multi-file find and replace.
Plug 'mhinz/vim-grepper'

" Completion, highlighting, and linting
Plug 'sheerun/vim-polyglot'
Plug 'ervandew/supertab'
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}

" Golang plugins
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'AndrewRadev/splitjoin.vim'

" Generate code snippets
Plug 'segeljakt/vim-silicon'

" Fuzzy searching
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

call plug#end()

" }}}
"==============================================================================
" Section: Settings {{{
"==============================================================================
let mapleader=","

syntax enable

try
  " try catch, since there is an initial lag when first loading all plugins
  colorscheme jellybeans
catch
  colorscheme desert
endtry

set t_Co=256
set background=dark

" See vulnerability:
" https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set modelines=0
set nomodeline

" You can bind contents of the visual selection to system primary buffer
" (* register in vim, usually referred as «mouse» buffer) by using
if has('nvim')
  vnoremap <LeftRelease> "*ygv
  set clipboard=unnamed
elseif has('macunix')
  set clipboard^=autoselect
else
  set clipboard=unnamed
endif

" Unset paste on InsertLeave.
autocmd InsertLeave * silent! set nopaste

" Dont insert first suggestion from autocompletions (omnicomplete)
" https://vim.fandom.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone
set omnifunc=syntaxcomplete#Complete

" Enable mouse support for specific modes
set mouse=a

"Enable filetype plugins
filetype plugin on
filetype indent on

" Disable autofolding
set nofoldenable

" Add line numbers
set number

set cursorline

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=100

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Disable line wrapping
set nowrap

" Add 80, 120 line columns
set colorcolumn=80,120

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" Hide mode indicator in command bar, since its covered via lightline
set noshowmode

" Add a bit extra margin to the left
set foldcolumn=0

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" Always show the status line
set laststatus=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" A buffer becomes hidden when it is abandoned
set hid

"New splits below, not above
set splitbelow

"New splits on the right, not left
set splitright

" Make merging lines smarter when using <shift-j>
if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j
endif

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Set to auto read when a file is changed from the outside
set autoread

" Automatically saves a file when calling :make, such as is done
" in go commands
set autowrite

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Linebreak on 500 characters if set wrap
set lbr
set tw=500
set nowrap

" How to represent non-printable characters
" In general, don't want tabs, so have them show up as special characters
set listchars=tab:>-,trail:_,extends:>,precedes:<,nbsp:~
set showbreak=\\ "
setlocal list "turn the above on

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" For regular expressions turn magic on
set magic

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Remove previous highlight, but keep in register
noh

" Makes search act like search in modern browsers
set incsearch 

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces (tabstop)
set shiftwidth=2
set tabstop=2

set ai "Auto indent
set si "Smart indent

" Show tab number only if more than 1
set stal=1

" Sets how many lines of history VIM has to remember
set history=500

" Disable the netrw history file which is otherwise added to ~/.vim/.netrwhist
let g:netrw_dirhistmax = 0

" This enables us to undo files even if you exit Vim.
" Note: this dir needs to be made prior to working
set undodir=~/.vim/tmp/undo
set undofile

" Turn on the Wild menu
" https://stackoverflow.com/questions/9511253/how-to-effectively-use-vim-wildmenu
set wildmenu
set wildmode=longest:full,full

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
"}}}
"==============================================================================
" Section: Mappings {{{
"==============================================================================
" Visual linewise up and down by default (and use gj gk to go quicker)
" Move cusor by display lines when wrapping
noremap <up> gk
noremap <down> gj
noremap j gj
noremap k gk

" Rename a buffer (only useful for terminal / buffer list)
nnoremap <leader>br :file 

if has('nvim')
  " Leader q to exit terminal mode
  tnoremap <leader>q <c-\><c-n>:q<cr>

  " mappings to move out from terminal to other views
  tnoremap <c-h> <c-\><c-n><c-w>h
  tnoremap <c-j> <c-\><c-n><c-w>j
  tnoremap <c-k> <c-\><c-n><c-w>k
  tnoremap <c-l> <c-\><c-n><c-w>l

  " Note: <c-backspace> should be used for backspace, since normal bs exits insert mode
  " Also, Altc+ - should be used instead of just -
  " Open terminal in vertical, horizontal and new tab
  nnoremap <leader>tv :vsplit term://fish<cr>
  nnoremap <leader>ts :split term://fish<cr>
  nnoremap <leader>tt :e term://fish<cr>

  " always start terminal in insert mode
  autocmd BufWinEnter,WinEnter term://* startinsert
endif

" Format paragraph (selected or not) to 80 character lines.
nnoremap <leader>fp gqap
xnoremap <leader>fp gqa

" Prevent selecting and pasting from overwriting what you originally copied.
xnoremap p pgvy

" Keep cursor at the bottom of the visual selection after you yank it.
vmap y ygv<esc>

" Prevent x from overriding what's in the clipboard.
noremap x "_x
noremap X "_x

" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Act like D and C
" yank from current position till end of line
nnoremap Y y$

" Edit global todo.md
nnoremap <leader>td :e ~/Documents/todo.md<cr>

" Reload vimrc
nnoremap confr :source $MYVIMRC<cr>

" Edit vimrc
if has('nvim')
  if empty(glob('~/.vimrc'))
    nnoremap confe :e $MYVIMRC<cr>
  else
    nnoremap confe :e ~/.vimrc<cr>
  endif
else
  nnoremap confe :e $MYVIMRC<cr>
endif

" Switch to last buffer
nnoremap <c-e> :e#<cr>

" save using <C-s> in every mode
" when in operator-pending or insert, takes you to normal mode
nnoremap <c-s> :write<Cr>
vnoremap <c-s> <c-c>:write<Cr>
inoremap <c-s> <esc>:write<Cr>
onoremap <c-s> <esc>:write<Cr>

" use `u` to undo, use `U` to redo, mind = blown
nnoremap U <c-r>

"https://vim.fandom.com/wiki/Fast_window_resizing_with_plus/minus_keys
"+ increases vertical buffer, - decreases
if bufwinnr(1)
  nnoremap + <c-w>+
  nnoremap _ <c-w>-
endif

nnoremap > <c-w>>
nnoremap < <c-w><

" Switch CWD to the directory of the open buffer
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" Print the directory of the current buffer
" Helpful since :pwd will print the project root dir when vim-rooter is applied
command! Dirname :echo expand('%:p:h')
nnoremap <leader>dn :Dirname<cr>
nnoremap <leader>fn :file<cr>

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"Go back to visual mode after indenting
vnoremap < <gv
vnoremap > >gv

" Use alt+j/k to move line down/up
" https://vim.fandom.com/wiki/Moving_lines_up_or_down
" https://vi.stackexchange.com/questions/2572/detect-os-in-vimscript
" Move a line of text using ALT+[jk] or Command+[jk] on mac
" Note: requires remapping of option/alt key in iterm term profile for macos to +esc
nnoremap <A-j> :m .+1<cr>==
nnoremap <A-k> :m .-2<cr>==
inoremap <A-j> <esc>:m .+1<cr>==gi
inoremap <A-k> <esc>:m .-2<cr>==gi
vnoremap <A-j> :m '>+1<cr>gv=gv
vnoremap <A-k> :m '<-2<cr>gv=gv

"Smart way to move between windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Move to the first/last non-blank character on this line
nnoremap H ^
nnoremap L $

" Quick Saving
nnoremap <leader>w :w<cr>

" Quick quit
nnoremap <leader>q :q<cr>

" Quick esc
inoremap jj <esc>

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
" Could replace with visual-star-search plugin
vnoremap <silent> * :<c-u>call VisualSelection('', '')<cr>/<c-r>=@/<cr><cr>
vnoremap <silent> # :<c-u>call VisualSelection('', '')<cr>?<c-r>=@/<cr><cr>

" clear highlighting
nnoremap <leader>nh :noh<cr>

" * highlights current word without navigating to first occurance
nnoremap * :let @/='\<<c-r>=expand("<cword>")<cr>\>'<cr>:set hls<cr>

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'gv'
    call CmdLine("Ack '" . l:pattern . "' " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

" Press * to search for the term under the cursor or a visual selection and
" then press a key below to replace all instances of it in the current file.
nnoremap <leader>rf :%s///g<left><left>
nnoremap <leader>crf :%s///gc<left><left><left>

" The same as above but instead of acting on the whole file it will be
" restricted to the previously visually selected range. You can do that by
" pressing *, visually selecting the range you want it to apply to and then
" press a key below to replace all instances of it in the current selection.
xnoremap <leader>rf :s///g<left><left>
xnoremap <leader>crf :s///gc<left><left><left>

" Type a replacement term and press . to repeat the replacement again. Useful
" for replacing a few instances of the term (comparable to multiple cursors).
nnoremap <silent> s* :let @/='\<'.expand('<cword>').'\>'<cr>cgn
xnoremap <silent> s* "sy:let @/=@s<cr>cgn

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /

" Vim like keys for the command line
cnoremap <c-h> <home>
cnoremap <c-l> <end>
cnoremap <c-k> <c-u>
cnoremap <c-p> <up>
cnoremap <c-n> <down>

" Add date -> type XDATE lowercase followed by a char will autofill the date
iab xdate <c-r>=strftime("%Y/%m/%d %H:%M:%S")<cr>

" nmap ]<space> o<esc>x
" nmap [<space> O<esc>x

nnoremap [oq :copen<cr>
nnoremap ]oq :cclose<cr>
nnoremap yoq :call ToggleQuickfix()<cr>

function! g:ToggleQuickfix()
  for winnr in range(1, winnr('$'))
    if getwinvar(winnr, '&syntax') == 'qf'
      cclose
      return
    endif
  endfor
  copen
endfunction

" }}}
"==============================================================================
" Section: Plugins {{{
"==============================================================================
" Vim-grepper {{{
"==============================================================================
let g:grepper={}
let g:grepper.tools=["rg"]

xmap gr <plug>(GrepperOperator)

" After searching for text, press this mapping to do a project wide find and
" replace. It's similar to <leader>rf except this one applies to all matches
" across all files instead of just the current file.
nnoremap <leader>rpg
  \ :let @s='\<'.expand('<cword>').'\>'<cr>
  \ :Grepper -cword -noprompt<cr>
  \ :cfdo %s/<c-r>s//g \| update
  \<left><left><left><left><left><left><left><left><left><left><left>

" The same as above except it works with a visual selection.
xmap <leader>rpg
    \ "sy
    \ gvgr
    \ :cfdo %s/<c-r>s//g \| update
     \<left><left><left><left><left><left><left><left><left><left><left>

" }}}
"==============================================================================
" Fugitive {{{
"==============================================================================
" This normally opens up a split buffer, to make full screen with <c-w>o
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gl :Glog -n 50<cr>

" --paginate/-p runs the command via the terminal and captures its output
" Retains color which is nice for git branch
" Running -P/--no-pager or :Git! will output contents to a tmp file and add it
" to a split buffer which is useful for lots of output
nnoremap <leader>gb :Git --paginate branch<cr>

" }}}
"==============================================================================
" NerdTree {{{
"==============================================================================
let g:NERDTreeWinPos = "left"
let g:NERDTreeWinSize=35

" Prevent fluff from appearing in the file drawer
let NERDTreeIgnore=[
            \ '\.pyc$', '__pycache__', 'node_modules$', '\~$', '\.git$',
            \ '\.DS_Store$', '\.meta$', '\.settings', '\.classpath', '\.project',
            \ '^\.gradle$', '^\.idea$'
            \]

" Show hidden files in NERDTree
let NERDTreeShowHidden=1

" Ignore the help-instructions at the top of NERDTree
let NERDTreeMinimalUI=1

" Delete the NERDTree buffer when it's the only one left
let NERDTreeAutoDeleteBuffer=1

" Close automatically if nerd tree is only buffer open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Dont focus Nerdtree on enter
" autocmd! VimEnter * NERDTree | wincmd w

let g:NERDTreeQuitOnOpen = 0

nnoremap yoe :NERDTreeToggle<cr>
nnoremap [oe :NERDTree<cr>
nnoremap ]oe :NERDTreeClose<cr>

" }}}
"==============================================================================
" GitGutter {{{
"==============================================================================
let g:gitgutter_map_keys = 0

nnoremap ]h :GitGutterNextHunk<cr>
nnoremap [h :GitGutterPrevHunk<cr>

" }}}
"==============================================================================
" TagBar {{{
"==============================================================================
nnoremap yot :TagbarToggle<cr>
nnoremap [ot :TagbarOpen<cr>
nnoremap ]ot :TagbarClose<cr>

" }}}
"==============================================================================
" Tabularize {{{
"==============================================================================
" NOTE:
"   - t = Tabularize
"   - f = format
"   - m = markdown
nnoremap <leader>ft= :Tabularize /=<cr>
vnoremap <leader>ft= :Tabularize /=<cr>
nnoremap <leader>ftm :Tabularize /\|<cr>
vnoremap <leader>ftm :Tabularize /\|<cr>

"}}}
"==============================================================================
" Lightline {{{
"==============================================================================
function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''

  let ro = &readonly ? ' [RO]' : ''

  if filename =~# '__Tagbar__'
    return 'Tagbar' . ro
  endif

  if filename =~# 'NERD_tree'
    return 'NerdTree' . ro
  endif

  if &readonly
    return filename . ro
  else
    return filename . modified
  endif

endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fileencoding !=# '' ? &fileencoding : ''): ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : '') : ''
endfunction

"\ @% =~# 'NERD_tree' ? 'NerdTree' :
function! LightlineMode()
  return winwidth(0) > 70 ? &paste ? lightline#mode() . ' (PASTE)' : lightline#mode() : ''
endfunction

let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ ['mode'],
      \             [ 'filename','fugitive'],
      \             ['cocstatus']
      \    ],
      \ 'right': [
      \           [ 'lineinfo' ], ['percent'],
      \           ['fileformat', 'fileencoding', 'filetype' ],
      \  ]
      \ },
      \ 'inactive': {
      \   'left': [['filename']],
      \   'right': [[ 'lineinfo' ], ['percent']]
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \   'cocstatus': 'coc#status',
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"RO":""}',
      \   'modified': '%{&filetype=="help" ? "" : &modified ? "+" : &modifiable ? "" : "-"}',
      \   'fugitive': '%{exists("*fugitive#head") ? winwidth(0) > 70 ? fugitive#head(): "" : "" }'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(winwidth(0) > 70 && &filetype!="help"&& &readonly)',
      \   'modified': '(winwidth(0) > 70 && &filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(winwidth(0) > 70 && exists("*fugitive#head") && ""!=fugitive#head())'
      \ },
      \ 'separator': { 'left': ' ', 'right': ' ' },
      \ 'subseparator': { 'left': '|', 'right': '|' }
      \ }

" }}}
"==============================================================================
" Vim-Go {{{
"==============================================================================
" For walkthrough, use the following github repo as example:
" - https://github.com/fatih/vim-go-tutorial#quick-setup
" let g:go_def_mode='godef'
" let g:go_info_mode='guru'
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

" Disable go def mapping so we can delegate it to the coc lsp = 0
" let g:go_def_mapping_enabled = 0
let g:go_def_mapping_enabled = 0

" Fmt on save
let g:go_fmt_autosave = 1

" Automatically format and also rewrite your import declarations
" If it is too slow, you can use the manual :GoImports command
let g:go_fmt_command = "gofmt"

" Do not run linting on save
let g:go_metalinter_autosave = 0

" Automatically highlight matching identifiers (methods, variables...)
let g:go_auto_sameids = 1

" Automatically show info when cursor on method
" Has an issue when putting cursor over lib imports
let g:go_auto_type_info = 1

" Makes all popup buffers quickfix type buffers
let g:go_list_type = "quickfix"

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1

" }}}
"==============================================================================
" UltiSnips {{{
"==============================================================================
" Better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Since we are already using Deoplete, and using tab with both doesn't work nice use <c-j> instead
" let g:UltiSnipsExpandTrigger="<c-j>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" }}}
"==============================================================================
" FZF {{{
"==============================================================================
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

if executable('fd')
  let $FZF_DEFAULT_COMMAND="fd --type f --hidden --no-ignore-vcs --color=never -E .git -E node_modules -E .gradle -E '*.class' -E .idea -E .settings -E .project -E .classpath"
elseif executable('rg')
  let $FZF_DEFAULT_COMMAND="rg --files --no-ignore-vcs --hidden"
endif

nnoremap <c-f> :Files<cR>
nnoremap <c-g> :GFiles<cr>
nnoremap <c-b> :Buffers<cr>
nnoremap <c-y> :History<cr>
nnoremap <c-x> :Maps<cr>
nnoremap <c-m> :BTags<cr>

" Match color scheme
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

if has('nvim')
  " https://github.com/junegunn/fzf.vim/issues/221
  autocmd FileType fzf tnoremap <buffer> <c-j> <down>
  autocmd FileType fzf tnoremap <buffer> <c-k> <up>
endif

" }}}
"==============================================================================
" Ack {{{
"==============================================================================
if executable('rg')
  set grepformat=%f:%l:%c:%m
  set grepprg=rg\ -S\ --vimgrep\ --no-ignore-vcs\ --no-heading\ --hidden
  let g:ackprg = 'rg -S --no-heading --no-ignore-vcs --hidden --vimgrep'
endif

nnoremap \ :LAck<space>
" }}}
"==============================================================================
" Markdown {{{
"==============================================================================
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_math = 1
let g:vim_markdown_strikethrough = 1

let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0
" let g:vim_markdown_no_default_key_mappings = 1

augroup markdown
  autocmd!
  autocmd BufNewFile,BufRead CHANGELOG.txt,README.txt set filetype=markdown
  autocmd FileType markdown set textwidth=79
augroup END

" }}}
"==============================================================================
" Commentary {{{
"==============================================================================
autocmd FileType text setlocal commentstring=#\ %s
autocmd FileType json setlocal commentstring=//\ %s

" }}}
"==============================================================================
" Supertab {{{
"==============================================================================
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"

" }}}
"==============================================================================
" Vim-devicons {{{
"==============================================================================
"https://github.com/ryanoasis/vim-devicons/wiki/FAQ-&-Troubleshooting#how-do-i-solve-issues-after-re-sourcing-my-vimrc
if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif

" NERDTrees File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('go', 'cyan', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('yaml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'red', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'red', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'red', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bat', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('Vagrantfile', 'cyan', 'none', 'cyan', '#151515')

" }}}
"==============================================================================
" Section: Coc Mappings {{{
"==============================================================================
let g:coc_global_extensions=[
      \ 'coc-json', 'coc-eslint', 'coc-tsserver',
      \ 'coc-html', 'coc-css', 'coc-vetur', 'coc-rls',
      \ 'coc-yaml', 'coc-python', 'coc-lists', 'coc-git',
      \ 'coc-vimlsp', 'coc-xml', 'coc-ultisnips', 'coc-snippets',
      \ 'coc-java', 'coc-marketplace', 'coc-prettier',
      \]

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<c-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<c-g>u\<cr>"

if exists('*CocActionAsync')
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
endif

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Use K to see documentation in a popup preview window
nnoremap <silent> K :call <SID>show_documentation()<cr>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold :call CocAction('fold', <f-args>)
command! -nargs=0 Imports :call CocAction('runCommand', 'editor.action.organizeImport')

" Remap keys for gotos
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gf <Plug>(coc-references)

" Remap for do codeAction of current line
nmap <leader>a  <Plug>(coc-codeaction)

" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

function! SetupCommandAbbrs(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

" Use C to open coc config
call SetupCommandAbbrs('CC', 'CocConfig')
call SetupCommandAbbrs('CL', 'CocList')

" }}}
"==============================================================================
" }}}
"==============================================================================
" Section: Misc Functions {{{
"=============================================================================
function! Copy2Register(reg)
  let hits = []
  %s//\=len(add(hits, submatch(0))) ? submatch(0) : ''/gne
  let reg = empty(a:reg) ? '+' : a:reg
  execute 'let @'.reg.' = join(hits, "") . "\n"'
endfunction

function! CopyMatches(regex)
  " Clear the a register
  normal! qaq

  " Copy the result to the register 'A'
  execute '/' . a:regex
  call Copy2Register('A')

  " Store the result from register 'A' to the clipboard
  let @+ = trim(@a)
endfunction

command! -complete=file -nargs=* ShellGitCmd call s:RunGitShellCommand('git '.<q-args>)
command! -complete=shellcmd -nargs=+ ShellCmd call s:RunShellCommand(<q-args>)

" Could also use the built in compiler command
" :compiler gradle // Or gradlew if using wrapper
" :make gradle-task-here // :make run 
command! -complete=file -nargs=* Gradle call s:RunShellCommand('gradle '.<q-args>)

function! s:RunGitShellCommand(cmdline)
  let isfirst = 1
  let words = []
  for word in split(a:cmdline)
    if isfirst
      let isfirst = 0  " don't change first word (shell command)
    else
      if word[0] =~ '\v[%#<]'
        let word = expand(word)
      endif
      let word = shellescape(word, 1)
    endif
    call add(words, word)
  endfor
  let expanded_cmdline = join(words)
  botright new
  setlocal buftype=nofile syntax=fugitive bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:  ' . a:cmdline)
  call setline(2, 'Expanded to:  ' . expanded_cmdline)
  call append(line('$'), substitute(getline(2), '.', '=', 'g'))
  silent execute '$read !'. expanded_cmdline
  1
endfunction

" https://vim.fandom.com/wiki/Display_output_of_shell_commands_in_new_window
function! s:RunShellCommand(cmdline)
  let isfirst = 1
  let words = []
  for word in split(a:cmdline)
    if isfirst
      let isfirst = 0  " don't change first word (shell command)
    else
      let word = substitute(word, '\v[%$<]', expand('%'), '')
    endif
    call add(words, word)
  endfor
  let expanded_cmdline = join(words)
  botright new
  setlocal buftype=nofile syntax=sh bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:  ' . a:cmdline)
  call setline(2, 'Expanded to:  ' . expanded_cmdline)
  call append(line('$'), substitute(getline(2), '.', '=', 'g'))
  silent execute '$read !'. expanded_cmdline
  1
endfunction

" }}}
"==============================================================================
" Section: Language Specific Mappings {{{
"==============================================================================
" Go {{{
"==============================================================================
" | command         | description                                                                                         |
" | vaf             | select whole function (including comments)                                                          |
" | vif             | select function body only                                                                           |
" | dif             | delete function body                                                                                |
" | yif             | copy function body                                                                                  |
" | <c-]> or gd     | go to declaration                                                                                   |
" | <c-t>           | go back a definition                                                                                |
" | ]]              | jump to next function (accepts v]], y]], d]]...)                                                    |
" | [[              | jump to previous function                                                                           |
" | :GoWhicherrs    | Shows which types of errors can occur from error return type                                        |
" | :GoChannelPeers | Shows information about a selected channel                                                          |
" | :GoCallees      | Shows all possible targets for the current function                                                 |
" | :GoCallers      | Shows which functions call the current function and navigates to the usage, similar to GoReferrers  |
" | :GoRename       | refactor renames current identifier(only works in GOPATH)                                           |
" | :GoFreevars     | shows variables that are referenced but not defined within a given selection, helps for refactoring |
" | :GoGenerate     | runs go generate                                                                                    |
" | :GoImpl         | generates methods for a given interface                                                             |
"
" Can also do GoImpl anywhere in file, just specify which type to attach it to
" :GoImpl b *B fmt.Stringer
" Can be custom impl also: :GoImpl github.com/asidlo/algorithms/collections.Stack

augroup go
  autocmd!

  " Show by default 4 spaces for a tab
  autocmd BufNewFile,BufRead,BufEnter *.go
    \ setlocal noexpandtab |
    \ set tabstop=4 |
    \ set shiftwidth=4 |
    \ set tw=79 |
    \ setlocal nolist

  " :GoBuild and :GoTestCompile
  autocmd FileType go nmap <leader>rb :<c-u>call <SID>build_go_files()<cr>

  " :GoTest
  autocmd FileType go nmap <leader>rtt  <Plug>(go-test)
  autocmd FileType go nmap <leader>rtf  <Plug>(go-test-func)

  " :GoRun
  if has('nvim')
    autocmd FileType go nmap <leader>rr <Plug>(go-run-split)
  else
    autocmd FileType go nmap <leader>rr <Plug>(go-run)
  endif

  " :GoDescribe - Show methods for a given class / interface
  " <leader>k mapping chosen to reflect <s-k> for coc mapping show doc
  autocmd FileType go nmap <leader>k <Plug>(go-describe)

  " :GoMetaLinter
  autocmd FileType go nmap <leader>rl <Plug>(go-metalinter)

  " :GoDef but opens in a vertical split
  autocmd FileType go nmap <leader>dv <Plug>(go-def-vertical)

  " :GoDef but opens in a horizontal split
  autocmd FileType go nmap <leader>ds <Plug>(go-def-split)

  " :GoDecls - Show all methods in current file (Methods)
  " Think (list methods/members)
  autocmd Filetype go nmap <leader>lm :GoDecls<cr>

  " Show all files in current package
  autocmd Filetype go nmap <leader>ls :GoFiles<cr>

  " Show all dependencies of current file
  autocmd Filetype go nmap <leader>ld :GoDeps<cr>

  " Find usages
  autocmd Filetype go nmap <leader>lu :GoReferrers<cr>

  " Shows all interfaces current type/struct implements
  autocmd Filetype go nmap <leader>li :GoImplements<cr>

  " :GoAlternate  commands :A, :AV, :AS and :AT
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

  " Run :GoBuild or :GoTestCompile based on the go file
  function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
      call go#test#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
      call go#cmd#Build(0)
    endif
  endfunction

augroup END

" }}}
"==============================================================================
" Java {{{
"==============================================================================
augroup java
  autocmd!

  " Navigate functions using [ and ] instead of ]m
  autocmd FileType java nmap ]] ]m]m^
  autocmd FileType java nmap [[ [m^
  autocmd FileType java set makeprg=javac\ %
  set errorformat=%A%f:%l:\ %m,%-Z%p^,%-C.%#

  " Run gradle based projects using built in make and gradle compiler
  " Requires the build.gradle file to have the 'application' plugin applied
  " and the following code to be added:
  "
  "```groovy
  " application {
  "     mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : ""
  " }
  "```
  " autocmd FileType java execute "compiler gradlew"
  " autocmd FileType java nmap <leader>rr :make run -PmainClass="%:p"<cr>

  " If you have gradle modules, you need to specify module name that gradle
  " needs to search for the specified test, else it will look in each and fail
  " if not found in one.
  " autocmd FileType java nmap <leader>rtt :make -qi project:test --tests "%:t:r"

  autocmd FileType java,groovy
      \ set tabstop=4 |
      \ set softtabstop=4 |
      \ set shiftwidth=4 |
      \ set textwidth=79 |
      \ set expandtab |
      \ set autoindent |
      \ setlocal nolist

  command! A :call FindJavaAlternate(':e')
  command! AS :call FindJavaAlternate(':split')
  command! AV :call FindJavaAlternate(':vsplit')

  " open_command can be any valid vim command used to open a buffer
  " usage: call FindJavaAlternate(':e')
  " see commands above for other examples
  function! FindJavaAlternate(open_command)
    let file_path = expand('%:p:h')
    let file_name = expand('%:t')
    let test_path = substitute(file_path, 'main', 'test', '')
    let java_path = substitute(file_path, 'test', 'main', '')
    if file_path ==# test_path
      let java_file = java_path . '/' . substitute(file_name, '\.*Test\.java', '\.java', '')
      echon "Alternate = java_file " . java_file
      execute a:open_command . ' ' . java_file
    elseif file_path ==# java_path
      let test_file = test_path . '/' . substitute(file_name, '\.*\.java', 'Test\.java', '')
      echon "Alternate = test_file " . test_file
      execute a:open_command . ' ' . test_file
    else
      echoerr "Unable to find alternate for: " . file_path |
            \ echoerr "Tried the following:" |
            \ echoerr "- test_file: ". test_file |
            \ echoerr "- java_file: ". java_file
    end
  endfunction
  function! CopyFullyQualifiedName()
    call CopyMatches('\(package .*\)\@<=[^;]')
    let filename = expand('%:t')
    let @+ = @+ . '.' . substitute(filename, '.java', '', '')
  endfunction


  " Get the package for the current file (Think CopyPackage)
  " Grabs all of the content between 'package' and ';' ex: 'package com.nexidia.db;'
  " https://jbodah.github.io/blog/2016/11/01/positivenegative-lookaheadlookbehind-vim/
  command! CpPkg call CopyMatches('\(package .*\)\@<=[^;]')
  command! CpImport call CopyFullyQualifiedName()
augroup END

" }}}
"==============================================================================
" Misc {{{
"==============================================================================
autocmd FileType json syntax match Comment +\/\/.\+$+
autocmd FileType vim set foldmethod=marker
autocmd BufRead,BufNewFile agent-service*.log,base-service*.log,gateway-service*.log,compute-service*.log,control-service*.log set syntax=nxlog
autocmd BufEnter *.png,*.jpg,*.gif,*.jpeg exec "silent !open ".expand("%:p")

" }}}
"==============================================================================
" }}}
"==============================================================================
