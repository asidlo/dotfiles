# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd 
setopt extendedglob 
setopt nomatch 
setopt notify 
setopt auto_pushd 
setopt pushd_ignore_dups 
setopt pushd_silent 
setopt pushd_to_home
setopt append_history 
setopt hist_ignore_all_dups
setopt hist_reduce_blanks
setopt hist_verify 
setopt inc_append_history
setopt share_history 
setopt hist_ignore_space
setopt bang_hist
unsetopt hist_ignore_space
setopt chase_links
setopt correct
setopt extended_glob
setopt glob_dots
unsetopt rm_star_silent
unsetopt beep
bindkey -e

zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors 'di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'

autoload -Uz compinit && compinit
autoload -U colors && colors
setopt prompt_subst

if (( $+commands[antibody] )); then
	source <(antibody init)
	antibody bundle zsh-users/zsh-completions 
	antibody bundle zsh-users/zsh-syntax-highlighting
	antibody bundle zsh-users/zsh-history-substring-search
	antibody bundle zsh-users/zsh-autosuggestions
	antibody bundle romkatv/gitstatus
	source $(antibody home)/https-COLON--SLASH--SLASH-github.com-SLASH-romkatv-SLASH-gitstatus/gitstatus.plugin.zsh
else
  >&2 echo "$fg[yellow]WARN$reset_color: Antibody not found. Install antibody and add it to PATH"
fi


# Simple Zsh prompt with Git status.

# Source gitstatus.plugin.zsh from $GITSTATUS_DIR or from the same directory
# in which the current script resides if the variable isn't set.
# source "${GITSTATUS_DIR:-${${(%):-%x}:h}}/gitstatus.plugin.zsh" || return

# Sets GITSTATUS_PROMPT to reflect the state of the current git repository. Empty if not
# in a git repository. In addition, sets GITSTATUS_PROMPT_LEN to the number of columns
# $GITSTATUS_PROMPT will occupy when printed.
#
# Example:
#
#   GITSTATUS_PROMPT='master ⇣42⇡42 ⇠42⇢42 *42 merge ~42 +42 !42 ?42'
#   GITSTATUS_PROMPT_LEN=39
#
#   master  current branch
#      ⇣42  local branch is 42 commits behind the remote
#      ⇡42  local branch is 42 commits ahead of the remote
#      ⇠42  local branch is 42 commits behind the push remote
#      ⇢42  local branch is 42 commits ahead of the push remote
#      *42  42 stashes
#    merge  merge in progress
#      ~42  42 merge conflicts
#      +42  42 staged changes
#      !42  42 unstaged changes
#      ?42  42 untracked files
function gitstatus_prompt_update() {
  emulate -L zsh
  typeset -g  GITSTATUS_PROMPT=''
  typeset -gi GITSTATUS_PROMPT_LEN=0

  # Call gitstatus_query synchronously. Note that gitstatus_query can also be called
  # asynchronously; see documentation in gitstatus.plugin.zsh.
  gitstatus_query 'MY'                  || return 1  # error
  [[ $VCS_STATUS_RESULT == 'ok-sync' ]] || return 0  # not a git repo

  local      clean='%F{green}'   # green foreground
  local   modified='%F{yellow}'  # yellow foreground
  local  untracked='%F{blue}'   # blue foreground
  local conflicted='%F{red}'  # red foreground

  local p

  local where  # branch name, tag or commit
  if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
	where=$VCS_STATUS_LOCAL_BRANCH
  elif [[ -n $VCS_STATUS_TAG ]]; then
	p+='%f#'
	where=$VCS_STATUS_TAG
  else
	p+='%f@'
	where=${VCS_STATUS_COMMIT[1,8]}
  fi

  (( $#where > 32 )) && where[13,-13]="…"  # truncate long branch names and tags
  p+="${clean}${where//\%/%%}"             # escape %

  # ⇣42 if behind the remote.
  (( VCS_STATUS_COMMITS_BEHIND )) && p+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
  # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
  (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && p+=" "
  (( VCS_STATUS_COMMITS_AHEAD  )) && p+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
  # ⇠42 if behind the push remote.
  (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"
  (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=" "
  # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.
  (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) && p+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"
  # *42 if have stashes.
  (( VCS_STATUS_STASHES        )) && p+=" ${clean}*${VCS_STATUS_STASHES}"
  # 'merge' if the repo is in an unusual state.
  [[ -n $VCS_STATUS_ACTION     ]] && p+=" ${conflicted}${VCS_STATUS_ACTION}"
  # ~42 if have merge conflicts.
  (( VCS_STATUS_NUM_CONFLICTED )) && p+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
  # +42 if have staged changes.
  (( VCS_STATUS_NUM_STAGED     )) && p+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
  # !42 if have unstaged changes.
  (( VCS_STATUS_NUM_UNSTAGED   )) && p+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
  # ?42 if have untracked files. It's really a question mark, your font isn't broken.
  (( VCS_STATUS_NUM_UNTRACKED  )) && p+=" ${untracked}?${VCS_STATUS_NUM_UNTRACKED}"

  GITSTATUS_PROMPT="${p}%f"

  # The length of GITSTATUS_PROMPT after removing %f and %F{color}.
  # Note that wc -m adds +1 which is why we substract 1 from the value
  GITSTATUS_PROMPT_LEN=$(($(echo $GITSTATUS_PROMPT | sed 's/%F{[a-zA-Z]*}\|%f//g' | wc -m) - 1))
}

if typeset -f gitstatus_stop > /dev/null && typeset -f gitstatus_start > /dev/null; then
	# Start gitstatusd instance with name "MY". The same name is passed to
	# gitstatus_query in gitstatus_prompt_update. The flags with -1 as values
	# enable staged, unstaged, conflicted and untracked counters.
	gitstatus_stop 'MY' && gitstatus_start -s -1 -u -1 -c -1 -d -1 'MY'

	# On every prompt, fetch git status and set GITSTATUS_PROMPT.
	autoload -Uz add-zsh-hook
	add-zsh-hook precmd gitstatus_prompt_update
else
	>&2 echo "$fg[yellow]WARN$reset_color: gitstatus_start|gitstatus_stop not found; install gitstatus plugin"
fi

PROMPT='%{$fg[cyan]%}%n%{$reset_color%}'                             # USERNAME
PROMPT+=' at %{$fg[magenta]%}%m%{$reset_color%}'                     # at HOSTNAME
PROMPT+=' in %{$fg[blue]%}%~%u%{$reset_color%}'                      # in DIRECTORY
PROMPT+='${GITSTATUS_PROMPT:+ on $GITSTATUS_PROMPT}'                 # gitstatus (if in repo)
PROMPT+=$'\n'                                                        # newline
PROMPT+='%(?.%{$fg[white]%}.%{$fg[red]%})%(!.#.%%)%{$reset_color%} ' # % (red if error white otherwise)

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh ] && source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh
