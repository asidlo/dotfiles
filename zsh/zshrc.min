# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd 
setopt extendedglob 
unsetopt nomatch 
setopt notify 
setopt auto_pushd 
setopt pushd_ignore_dups 
setopt pushd_silent 
setopt pushd_to_home
setopt append_history 
setopt hist_ignore_all_dups
setopt hist_reduce_blanks
setopt hist_verify 
setopt inc_append_history
setopt share_history 
setopt hist_ignore_space
setopt bang_hist
unsetopt hist_ignore_space
setopt chase_links
setopt correct
setopt extended_glob
setopt glob_dots
unsetopt rm_star_silent
unsetopt beep
bindkey -e

zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors 'di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'

# compinit only once per day to speed up terminal load time
# https://gist.github.com/ctechols/ca1035271ad134841284#gistcomment-2767420
autoload -Uz compinit
for dump in $HOME/.zcompdump(#qN.m1); do
	compinit
	if [[ -s "$dump" && (! -s "$dump.zwc" || "$dump" -nt "$dump.zwc") ]]; then
		zcompile "$dump"
	fi
done
compinit -C

# load colors and allows in prompt
# autoload -U colors && colors
# setopt prompt_subst

# Profiling tools for measuring zsh startup times
# zmodload zsh/zprof

# autoload -Uz vcs_info
# zstyle ':vcs_info:*' enable git
# zstyle ':vcs_info:*' actionformats " on %{$fg[green]%}%b%{$reset_color%} (%{$fg[red]%}%a%{$reset_color%})"
# zstyle ':vcs_info:git*' formats " on %{$fg[green]%}%b%{$reset_color%}"

# precmd() { vcs_info }
if [ -d ~/.local/bin ]; then
	mkdir -p ~/.local/bin
fi
export PATH=$PATH:~/.local/bin

if ! (( $+commands[antibody] )); then
	echo "Installing antibody plugin manager"
	curl -sfL git.io/antibody | sh -s - -b ~/.local/bin
fi
source <(antibody init)
antibody bundle zsh-users/zsh-syntax-highlighting
antibody bundle zsh-users/zsh-history-substring-search
antibody bundle zsh-users/zsh-autosuggestions
antibody bundle "greymd/docker-zsh-completion"
# antibody bundle ohmyzsh/ohmyzsh path:plugins/docker

# PROMPT='%{$fg[cyan]%}%n%{$reset_color%}'                             # USERNAME
# PROMPT+=' at %{$fg[magenta]%}%m%{$reset_color%}'                     # at HOSTNAME
# PROMPT+=' in %{$fg[blue]%}%~%u%{$reset_color%}'                      # in DIRECTORY
# PROMPT+='${vcs_info_msg_0_}'

# PROMPT+=$'\n'                                                        # newline
# PROMPT+='%(?.%{$fg[white]%}.%{$fg[red]%})%(!.#.%%)%{$reset_color%} ' # % (red if error white otherwise)

# https://medium.com/@MyDiemHo/enable-azure-cli-autocomplete-in-oh-my-zsh-93e79019a20d
autoload -U +X bashcompinit && bashcompinit
[ -f /etc/bash_completion.d/azure-cli ] && source /etc/bash_completion.d/azure-cli
[ -f /usr/local/etc/bash_completion.d/az ] && source /usr/local/etc/bash_completion.d/az 

if ! (( $+commands[starship] )); then
	echo "Install starship for customized prompt: https://starship.rs/guide/#%F0%9F%9A%80-installation"
	# sh -c "$(curl -fsSL https://starship.rs/install.sh)"
else
	eval "$(starship init zsh)"
fi

# kubectl completion
if (( $+commands[kubectl] )) && [ $(command -v kubectl) > /dev/null ];then
    source <(kubectl completion zsh)
    alias k=kubectl
    compdef __start_kubectl k
fi

# zsh parameter completion for the dotnet CLI
_dotnet_zsh_complete()
{
  local completions=("$(dotnet complete "$words")")

  reply=( "${(ps:\n:)completions}" )
}
compctl -K _dotnet_zsh_complete dotnet

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh ] && source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh

if (( $+commands[nvim] )); then
	export VISUAL=nvim
	export EDITOR=nvim
	export MANPAGER="$EDITOR +Man!"
    export SUDO_EDITOR=$(which nvim)
else
	export VISUAL=vim
	export EDITOR=vim
	export MANPAGER="vim -M +MANPAGER -"
fi

# https://github.com/ohmyzsh/ohmyzsh/issues/5157
export LC_CTYPE=en_US.UTF-8
# export TERM=xterm-256color

if (( $+commands[tree] )); then
	alias tree='tree -C'
fi

if (( $+commands[clip.exe] )); then
    alias copy=clip.exe
elif (( $+commands[lemonade] )); then
    alias copy='lemonade copy'
elif (( $+commands[xclip] )); then
    alias copy='xclip -selection -c'
fi

# When installing from cargo, even on linux, those naming restrictions dont apply
if (( $+commands[fdfind] )); then
    alias fd='fdfind'
    FD_EXE='fdfind'
else
    FD_EXE='fd'
fi
if (( $+commands[batcat] )); then
    alias bat='batcat'
    BAT_EXE='batcat'
else
    BAT_EXE='bat'
fi

if (( $+commands[$FD_EXE] )) && (( $+commands[fzf] )) && (( $+commands[$BAT_EXE] )); then
	export FD_OPTS='--follow --exclude .git --exclude node_modules --exclude "*.class"'
	export FZF_DEFAULT_COMMAND="git ls-files --cached --others --exclude-standard 2> /dev/null | $FD_EXE --type f --type l $FD_OPTS"
	export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
	export FZF_ALT_C_COMMAND="$FD_EXE --type d $FD_OPTS"
	export FZF_DEFAULT_OPTS="
	--color=fg:#c2bebe,bg:-1,hl:#8be9fd
	--color=fg+:#f8f8f2,bg+:-1,hl+:#ff79c6
	--color=info:#bd93f9,prompt:#ff79c6,pointer:#ff79c6
	--color=marker:#50fa7b,spinner:#8be9fd,header:#f1fa8c
	--height 50% -1 --reverse --multi --inline-info
	--preview='$BAT_EXE --color=always --style=numbers {}'
	--preview-window='right:hidden'
	--bind='F2:toggle-preview'
	--bind='ctrl-d:half-page-down'
	--bind='ctrl-u:half-page-up'
	--bind='ctrl-a:select-all+accept'
	"
else
	if (( $+commands[$FD_EXE] )); then echo "Found $FD_EXE"; fi
	if (( $+commands[$BAT_EXE] )); then echo "Found $BAT_EXE"; fi
	if (( $+commands[fzf] )); then echo "Found fzf"; fi
	# Issue with installing batcat on wsl ubuntu: https://askubuntu.com/a/1300824
	# sudo apt install -o Dpkg::Options::="--force-overwrite" bat ripgrep
	>&2 echo "$fg[yellow]WARN$reset_color: [fzf|$FD_EXE|$BAT_EXE]+ not found. Install all and add to PATH" 
fi

# https://tech.serhatteker.com/post/2019-12/remove-duplicates-in-path-zsh/
typeset -U path

# Adds env variables for working in vscode devcontainer ssh for git ops
# VSCODE_SOCKET_FILE=($(ls /tmp/vscode-remote-containers-ipc-*.sock 2> /dev/null))
# VSCODE_AUTH_SOCK=($(ls /tmp/vscode-ssh-auth-*.sock 2> /dev/null))
# if [ ${#VSCODE_SOCKET_FILE[@]} -gt 0 ] && [ ${#VSCODE_AUTH_SOCK[@]} -gt 0 ]; then
#     if [ -S "${VSCODE_AUTH_SOCK[-1]}" ] && [ -S "${VSCODE_SOCKET_FILE[-1]}" ]; then
#         export REMOTE_CONTAINERS_IPC=${VSCODE_SOCKET_FILE[-1]}
#         export REMOTE_CONTAINERS_SOCKETS="[${VSCODE_AUTH_SOCK[-1]},/home/vscode/.gnupg/S.gpg-agent]"
#     fi
# fi

# Setting for the new UTF-8 terminal support in Lion
LANG=en_US.utf-8
LC_ALL=en_US.utf-8

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
