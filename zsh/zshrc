#==============================================================================
# Author: Andrew Sidlo
#==============================================================================
# Variables {{{
#==============================================================================
# Ex: Linux NXDEV181 4.4.0-17763-Microsoft #864-Microsoft Thu Nov 07 15:22:00 PST 2019 x86_64 x86_64 x86_64 GNU/Linux
local OS=$(uname -a)

local MAC='Darwin'
local LINUX='Linux'
local WIN='Microsoft'

# }}}
#==============================================================================
# Functions {{{
#==============================================================================
function is_mac() {
  [[ $OS =~ $MAC ]] && return 0
  return 1
}
function is_win() {
  [[ $OS =~ $WIN ]] && return 0
  return 1
}
function is_linux() {
  [[ $OS =~ $LINUX ]] && return 0
  return 1
}

# Completions & keybindings & functions
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Echoes a username/host string when connected over SSH (empty otherwise)
ssh_info() {
  [[ "$SSH_CONNECTION" != '' ]] && echo '%(!.%{$fg[red]%}.%{$fg[yellow]%})%n%{$reset_color%}@%{$fg[green]%}%m%{$reset_color%}:' || echo ''
}

git_branch() {
  # Exit if not inside a Git repository
  ! git rev-parse --is-inside-work-tree > /dev/null 2>&1 && return

  # Git branch/tag, or name-rev if on detached head
  local GIT_LOCATION=${$(git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD)#(refs/heads/|tags/)}

  # Add the branch icon and the branch name
  local -a GIT_INFO
  # GIT_INFO+=( "\033[38;5;15m(" )
  GIT_INFO+=( "\033[38;5;15m($GIT_LOCATION)%{$reset_color%}" )
  echo "${(j: :)GIT_INFO}"
}

# }}}
#==============================================================================
# Colors {{{
#==============================================================================
# https://joshdick.net/2017/06/08/my_git_prompt_for_zsh_revisited.html
# https://dustri.org/b/my-zsh-configuration.html
autoload -U colors && colors # Enable colors in prompt

# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors 'di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'

# }}}
#==============================================================================
# Vim-Mode {{{
#==============================================================================
bindkey -v
vim_ins_mode="%{$fg[yellow]%}[INS]%{$reset_color%}"
vim_cmd_mode="%{$fg[cyan]%}[CMD]%{$reset_color%}"
vim_mode=$vim_ins_mode

function zle-keymap-select {
    vim_mode="${${KEYMAP/vicmd/${vim_cmd_mode}}/(main|viins)/${vim_ins_mode}}"
    zle reset-prompt
}
zle -N zle-keymap-select

function zle-line-finish {
    vim_mode=$vim_ins_mode
}
zle -N zle-line-finish

# Make Vi mode transitions faster (KEYTIMEOUT is in hundredths of a second)
# 0.6 is slower than 1
export KEYTIMEOUT=1

# Better searching in command mode
bindkey -M vicmd '?' fzf-history-widget
bindkey -M vicmd ' ' fzf-history-widget


# Use C-F to complete recent command
# Note: need to use -s if binding to non widget, in this case we are binding to
# the right arrow key. You can discover key bindings by hitting <C-V><KEYCOMBO>
# in the terminal.
bindkey -s '^F' '^[[C' 

# Search history in insert mode using <C-R>
# bindkey '^r' history-incremental-search-backward

# if is_mac; then
  # Bind <A-[> to escape without moving, just like in linux
  # bindkey -M viins '“' vi-cmd-mode
  # Bind <A-H|J|K|L> respectively to escape so mac works like linux
  # bindkey -M viins '˙' vi-cmd-mode
  # bindkey -M viins '∆' vi-cmd-mode
  # bindkey -M viins '˚' vi-cmd-mode
  # bindkey -M viins '¬' vi-cmd-mode
# fi

# }}}
#==============================================================================
# Completion {{{
#==============================================================================
# Enable tab completion
autoload -U compinit && compinit

# Highlight menu selection
zstyle ':completion:*' menu select

# }}}
#==============================================================================
# Pushd {{{
#==============================================================================
setopt auto_pushd               # make cd push old dir in dir stack
setopt pushd_ignore_dups        # no duplicates in dir stack
setopt pushd_silent             # no dir stack after pushd or popd
setopt pushd_to_home            # `pushd` = `pushd $HOME`

# }}}
#==============================================================================
# History {{{
#==============================================================================
HISTFILE=~/.zsh_history         # where to store zsh config
HISTSIZE=1024                   # big history
SAVEHIST=1024                   # big history
setopt append_history           # append
setopt hist_ignore_all_dups     # no duplicate
unsetopt hist_ignore_space      # ignore space prefixed commands
setopt hist_reduce_blanks       # trim blanks
setopt hist_verify              # show before executing history commands
setopt inc_append_history       # add commands as they are typed, don't wait until shell exit 
setopt share_history            # share hist between sessions
setopt bang_hist                # !keyword

# }}}
#==============================================================================
# Misc {{{
#==============================================================================
setopt chase_links              # resolve symlinks
setopt correct                  # try to correct spelling of commands
setopt extended_glob            # activate complex pattern globbing
setopt glob_dots                # include dotfiles in globbing
unsetopt rm_star_silent         # ask for confirmation for `rm *' or `rm path/*'
unsetopt BEEP                   # Turn off all beeps

# }}}
#==============================================================================
# Prompt {{{
#==============================================================================
setopt prompt_subst     # allow funky stuff in prompt

# Use % as the non-root prompt character; # for root
# Change the prompt character color if the last command had a nonzero exit code
PS1='%{$fg[cyan]%}%n%{$reset_color%} at %{$fg[magenta]%}%m%{$reset_color%} in %{$fg[blue]%}%~%u $(git_branch)
$vim_mode %(?.%{$fg[white]%}.%{$fg[red]%})%(!.#.%%)%{$reset_color%} '
# %(?.%{$fg[white]%}.%{$fg[red]%})[$vim_mode%(?.%{$fg[white]%}.%{$fg[red]%})]%{$reset_color%} '


# }}}
#==============================================================================
# Misc {{{
#==============================================================================
if is_mac || is_linux; then
  export PATH=$PATH:/usr/local/bin
fi

# Fix for wsl setting umask to 0000
if test umask != '022'; then
  umask 022
fi

# Note, would need to do this if I didnt remap alt to Esc+ in iterm2
if is_mac; then
  bindkey 'ç' fzf-cd-widget
else
  bindkey '^[c' fzf-cd-widget
fi

bindkey '' fzf-file-widget
bindkey '' fzf-history-widget 

# }}}
#==============================================================================
# Exports {{{
#==============================================================================
# Editor [nvim|vim]
if (( $+commands[nvim] )); then
  export VISUAL=nvim
  export EDITOR=nvim
else
  export VISUAL=vim
  export EDITOR=vim
fi

# Fd, bat, fzf
if (( $+commands[fd] )) && (( $+commands[fzf] )) && (( $+commands[bat] )); then
  export FD_OPTS='--follow --exclude .git --exclude node_modules --exclude "*.class"'
  # Note in windows env vars use the following instead:
  # git ls-files --cached --others --exclude-standard 2> null | fd --type f --type l %FD_OPTS%
  export FZF_DEFAULT_COMMAND="git ls-files --cached --others --exclude-standard 2> /dev/null | fd --type f --type l $FD_OPTS"
  export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
  export FZF_ALT_C_COMMAND="fd --type d $FD_OPTS"
  export FZF_DEFAULT_OPTS='
    --color=fg:#c2bebe,bg:-1,hl:#8be9fd
    --color=fg+:#f8f8f2,bg+:-1,hl+:#ff79c6
    --color=info:#bd93f9,prompt:#ff79c6,pointer:#ff79c6
    --color=marker:#50fa7b,spinner:#8be9fd,header:#f1fa8c
    --height 50% -1 --reverse --multi --inline-info
    --preview="bat --color=always --style=numbers {}"
    --preview-window="right:hidden"
    --bind="F2:toggle-preview"
    --bind="ctrl-d:half-page-down"
    --bind="ctrl-u:half-page-up"
    --bind="ctrl-a:select-all+accept"
    --bind="ctrl-y:execute-silent(echo {+} | copy)"
  '
else
  >&2 echo "[fzf|fd|bat]+ not found. Install all and add to PATH" 
fi

# JAVA_HOME
is_mac && export JAVA_HOME=/Library/Java/JavaVirtualMachines/openjdk-13.0.2.jdk/Contents/Home

# Note: linux pattern is before the windows pattern since wsl would require the
# linux location over the windows location.
case $OS in
  *$MAC*)
    export GOROOT=(/usr/local/Cellar/go/*/libexec)
    export GOPATH=~/Documents/workspace/go
    export SDKMAN_DIR="/Users/asidlo/.sdkman"
    ;;
  *$LINUX*)
    export GOROOT=/usr/local/go
    export GOPATH=~/workspace/go
    export SDKMAN_DIR="/home/asidlo/.sdkman"
    ;;
  *$WIN*)
    export GOROOT=/c/Go
    export GOPATH=/d/go
    export SDKMAN_DIR="/c/Users/asidlo/.sdkman"
    ;;
esac

# Check if env vars are set, if so then add their bin to path
[ ! -z $GOROOT ] && export PATH=$PATH:"$GOROOT/bin"
[ ! -z $GOPATH ] && export PATH=$PATH:"$GOPATH/bin"

# }}}
#==============================================================================
# Aliases {{{
#==============================================================================
alias ll='ls -alF'
alias la='ls -A'
alias grep='grep --color=auto'
alias cls='clear'

if (( $+commands[tree] )); then
  alias tree='tree -C'
fi

# Note: windows pattern is before the linux pattern since wsl would require the
# windows alias over the linux alias.
case $OS in
  *$MAC*)
    alias ls='ls -G'
    alias copy='pbcopy'
    alias ctags=/usr/local/opt/universal-ctags/bin/ctags
    alias vim='/usr/local/Cellar/vim/**/bin/vim'
    ;;
  *$WIN*)
    alias copy='clip.exe'
    alias ls='ls --color=auto'
    ;;
  *$LINUX*)
    alias copy='xclip -selection -c'
    alias ls='ls --color=auto'
    ;;
esac

# }}}
#==============================================================================
# Plugins {{{
#==============================================================================
if ! (( $+commands[antibody] )); then
  >&2 echo "Antibody not found. Install antibody and add it to PATH"
  return 1
fi

source <(antibody init)
antibody bundle < ~/.zsh_plugins.txt

# Abbreviations using plugin 'momo-lab/zsh-abbrev-alias'
abbrev-alias -g g='git'
abbrev-alias -g py='python'
abbrev-alias -g py3='python3'
abbrev-alias -g confe="$EDITOR ~/.zshrc"
abbrev-alias -g confr="source ~/.zshrc"

# }}}
#==============================================================================
# SDKMAN {{{
#==============================================================================
# Note SDKMAN init should be last
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"

# }}}
#==============================================================================
